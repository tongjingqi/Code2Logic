[
    {
        "data_id": "lifegame-mcq-00000-stability",
        "qa_type": "State Prediction",
        "qa_level": "Hard",
        "question_id": 4,
        "question_description": "Questions about predicting steps needed to reach stability",
        "plot_level": "Medium",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nConsider the 3x3 region starting at cell (2,3).\n\nWhen analyzing this region's stability:\n• We treat it as an independent Game of Life system\n• The region is stable when either:\n  - All cells maintain their current states, or\n  - The cells form a repeating pattern\nHow many iterations will it take for this region to reach a stable state?\n\nOptions:\nA: 6\nB: 2\nC: 0\nD: 8\nE: 4\nF: 5\nG: 3\nH: 7",
        "answer": "C",
        "analysis": "Local Region Stability Analysis:\n\nStep 0 - Initial State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2 3\n0: [0] [1] 0 [1]\n1: 0 0 1 0\n2: [0] [1] 0 [0]\n3: [0] [1] 0 [0]\n\nTarget 3x3 Region (starting at (2,3),'1' stands for living cell and '0' stands for dead cell):\n0 0 1\n0 0 1\n1 0 1\n\nLocal Stability Analysis (treating the region as an independent Game of Life):\n\nThe region is stable in its initial state!\nWhen treated as an independent 3x3 Game of Life:\n\nCell at local position (0,0):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor above (wrapped via top/bottom boundary) at (2,0)\n  • Live neighbor left (wrapped via left/right boundary) at (0,2)\n  • Live neighbor lower left (wrapped via left/right boundary) at (1,2)\n  • Live neighbor upper left (wrapped via top/bottom and left/right boundary) at (2,2)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (0,1):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor lower right at (1,2)\n  • Live neighbor right at (0,2)\n  • Live neighbor upper left (wrapped via top/bottom boundary) at (2,0)\n  • Live neighbor upper right (wrapped via top/bottom boundary) at (2,2)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (0,2):\n- Currently alive\n- Has 3 live neighbors:\n  • Live neighbor above (wrapped via top/bottom boundary) at (2,2)\n  • Live neighbor below at (1,2)\n  • Live neighbor upper right (wrapped via top/bottom and left/right boundary) at (2,0)\n- Will survive (has 2 or 3 live neighbors)\n\nCell at local position (1,0):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor below at (2,0)\n  • Live neighbor left (wrapped via left/right boundary) at (1,2)\n  • Live neighbor lower left (wrapped via left/right boundary) at (2,2)\n  • Live neighbor upper left (wrapped via left/right boundary) at (0,2)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (1,1):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor lower left at (2,0)\n  • Live neighbor lower right at (2,2)\n  • Live neighbor right at (1,2)\n  • Live neighbor upper right at (0,2)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (1,2):\n- Currently alive\n- Has 3 live neighbors:\n  • Live neighbor above at (0,2)\n  • Live neighbor below at (2,2)\n  • Live neighbor lower right (wrapped via left/right boundary) at (2,0)\n- Will survive (has 2 or 3 live neighbors)\n\nCell at local position (2,0):\n- Currently alive\n- Has 3 live neighbors:\n  • Live neighbor left (wrapped via left/right boundary) at (2,2)\n  • Live neighbor lower left (wrapped via top/bottom and left/right boundary) at (0,2)\n  • Live neighbor upper left (wrapped via left/right boundary) at (1,2)\n- Will survive (has 2 or 3 live neighbors)\n\nCell at local position (2,1):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor left at (2,0)\n  • Live neighbor lower right (wrapped via top/bottom boundary) at (0,2)\n  • Live neighbor right at (2,2)\n  • Live neighbor upper right at (1,2)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (2,2):\n- Currently alive\n- Has 3 live neighbors:\n  • Live neighbor above at (1,2)\n  • Live neighbor below (wrapped via top/bottom boundary) at (0,2)\n  • Live neighbor right (wrapped via left/right boundary) at (2,0)\n- Will survive (has 2 or 3 live neighbors)\n\nThe option is C.",
        "options": [
            "A: 6",
            "B: 2",
            "C: 0",
            "D: 8",
            "E: 4",
            "F: 5",
            "G: 3",
            "H: 7"
        ],
        "image": "images/board_000.png",
        "state": "states/board_000.json"
    },
    {
        "data_id": "lifegame-mcq-00001-action",
        "qa_type": "State Prediction",
        "qa_level": "Medium",
        "question_id": 2,
        "question_description": "Questions about predicting the number of live cells after 1 iteration",
        "plot_level": "Medium",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nAfter 1 iterations, how many live cells will remain in the grid?\n\nOptions:\nA: 9\nB: 16\nC: 13\nD: 8\nE: 2\nF: 15\nG: 1\nH: 4",
        "answer": "D",
        "analysis": "Evolution Analysis:\n\nInitial State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2 3\n0: 1 0 0 0\n1: 0 0 1 0\n2: 0 0 1 0\n3: 1 0 0 0\n\nInitial Cell Analysis:\n\nIdentifying cells that will change in the next step:\n\nCell (0,0):\nCell (0,0) - currently alive\n\nNeighbors:\n- above (wrapped): (3,0) is alive\n- above left (wrapped): (3,3) is dead\n- above right (wrapped): (3,1) is dead\n- below left (wrapped): (1,3) is dead\n- below right: (1,1) is dead\n- below: (1,0) is dead\n- left (wrapped): (0,3) is dead\n- right: (0,1) is dead\n\nTotal live neighbors: 1\n\nPrediction:\n→ Will die due to underpopulation (fewer than 2 live neighbors)\n\nCell (0,1):\nCell (0,1) - currently dead\n\nNeighbors:\n- above (wrapped): (3,1) is dead\n- above left (wrapped): (3,0) is alive\n- above right (wrapped): (3,2) is dead\n- below left: (1,0) is dead\n- below right: (1,2) is alive\n- below: (1,1) is dead\n- left: (0,0) is alive\n- right: (0,2) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (0,3):\nCell (0,3) - currently dead\n\nNeighbors:\n- above (wrapped): (3,3) is dead\n- above left (wrapped): (3,2) is dead\n- above right (wrapped): (3,0) is alive\n- below left: (1,2) is alive\n- below right (wrapped): (1,0) is dead\n- below: (1,3) is dead\n- left: (0,2) is dead\n- right (wrapped): (0,0) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (1,1):\nCell (1,1) - currently dead\n\nNeighbors:\n- above left: (0,0) is alive\n- above right: (0,2) is dead\n- above: (0,1) is dead\n- below left: (2,0) is dead\n- below right: (2,2) is alive\n- below: (2,1) is dead\n- left: (1,0) is dead\n- right: (1,2) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (1,2):\nCell (1,2) - currently alive\n\nNeighbors:\n- above left: (0,1) is dead\n- above right: (0,3) is dead\n- above: (0,2) is dead\n- below left: (2,1) is dead\n- below right: (2,3) is dead\n- below: (2,2) is alive\n- left: (1,1) is dead\n- right: (1,3) is dead\n\nTotal live neighbors: 1\n\nPrediction:\n→ Will die due to underpopulation (fewer than 2 live neighbors)\n\nCell (1,3):\nCell (1,3) - currently dead\n\nNeighbors:\n- above left: (0,2) is dead\n- above right (wrapped): (0,0) is alive\n- above: (0,3) is dead\n- below left: (2,2) is alive\n- below right (wrapped): (2,0) is dead\n- below: (2,3) is dead\n- left: (1,2) is alive\n- right (wrapped): (1,0) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (2,1):\nCell (2,1) - currently dead\n\nNeighbors:\n- above left: (1,0) is dead\n- above right: (1,2) is alive\n- above: (1,1) is dead\n- below left: (3,0) is alive\n- below right: (3,2) is dead\n- below: (3,1) is dead\n- left: (2,0) is dead\n- right: (2,2) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (2,2):\nCell (2,2) - currently alive\n\nNeighbors:\n- above left: (1,1) is dead\n- above right: (1,3) is dead\n- above: (1,2) is alive\n- below left: (3,1) is dead\n- below right: (3,3) is dead\n- below: (3,2) is dead\n- left: (2,1) is dead\n- right: (2,3) is dead\n\nTotal live neighbors: 1\n\nPrediction:\n→ Will die due to underpopulation (fewer than 2 live neighbors)\n\nCell (2,3):\nCell (2,3) - currently dead\n\nNeighbors:\n- above left: (1,2) is alive\n- above right (wrapped): (1,0) is dead\n- above: (1,3) is dead\n- below left: (3,2) is dead\n- below right (wrapped): (3,0) is alive\n- below: (3,3) is dead\n- left: (2,2) is alive\n- right (wrapped): (2,0) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (3,0):\nCell (3,0) - currently alive\n\nNeighbors:\n- above left (wrapped): (2,3) is dead\n- above right: (2,1) is dead\n- above: (2,0) is dead\n- below (wrapped): (0,0) is alive\n- below left (wrapped): (0,3) is dead\n- below right (wrapped): (0,1) is dead\n- left (wrapped): (3,3) is dead\n- right: (3,1) is dead\n\nTotal live neighbors: 1\n\nPrediction:\n→ Will die due to underpopulation (fewer than 2 live neighbors)\n\nCell (3,1):\nCell (3,1) - currently dead\n\nNeighbors:\n- above left: (2,0) is dead\n- above right: (2,2) is alive\n- above: (2,1) is dead\n- below (wrapped): (0,1) is dead\n- below left (wrapped): (0,0) is alive\n- below right (wrapped): (0,2) is dead\n- left: (3,0) is alive\n- right: (3,2) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (3,3):\nCell (3,3) - currently dead\n\nNeighbors:\n- above left: (2,2) is alive\n- above right (wrapped): (2,0) is dead\n- above: (2,3) is dead\n- below (wrapped): (0,3) is dead\n- below left (wrapped): (0,2) is dead\n- below right (wrapped): (0,0) is alive\n- left: (3,2) is dead\n- right (wrapped): (3,0) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nOther cells will maintain their current state according to the rules.\n\nSummary of Predicted Changes:\n- 8 cells will become alive: (0,1), (0,3), (1,1), (1,3), (2,1), (2,3), (3,1), (3,3)\n- 4 cells will die: (0,0), (1,2), (2,2), (3,0)\n\n==================== After 1 iteration ====================\n\nGrid State('1' stands for living cell and '0' stands for dead cell,[ ] represents cells that have undergone changes):\n   0 1 2 3\n0: [0] [1] 0 [1]\n1: 0 [1] [0] [1]\n2: 0 [1] [0] [1]\n3: [0] [1] 0 [1]\n\nCounting final live cells row by row:\n\nRow 0:\n- Live cells: 2\n- Positions: (0,1), (0,3)\n\nRow 1:\n- Live cells: 2\n- Positions: (1,1), (1,3)\n\nRow 2:\n- Live cells: 2\n- Positions: (2,1), (2,3)\n\nRow 3:\n- Live cells: 2\n- Positions: (3,1), (3,3)\n\nFinal Count:\n- Initial live cells: 4\n- Final live cells: 8\n- Population change: +4\n\nThe option is D.",
        "options": [
            "A: 9",
            "B: 16",
            "C: 13",
            "D: 8",
            "E: 2",
            "F: 15",
            "G: 1",
            "H: 4"
        ],
        "image": "images/board_001.png",
        "state": "states/board_001.json"
    },
    {
        "data_id": "lifegame-mcq-00002-cell-changes",
        "qa_type": "State Prediction",
        "qa_level": "Medium",
        "question_id": 3,
        "question_description": "Questions about counting state changes of specific cells over iterations",
        "plot_level": "Easy",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nConsider the cell at position (2, 0). How will its state change over the next 4 iterations?\n\nOptions:\nA: Initially: alive → Step 1: alive → Step 2: dead → Step 3: dead → Step 4: dead\nB: Initially: alive → Step 1: dead → Step 2: alive → Step 3: alive → Step 4: alive\nC: Initially: dead → Step 1: alive → Step 2: dead → Step 3: dead → Step 4: alive\nD: Initially: alive → Step 1: alive → Step 2: dead → Step 3: alive → Step 4: alive\nE: Initially: dead → Step 1: alive → Step 2: dead → Step 3: alive → Step 4: dead\nF: Initially: dead → Step 1: alive → Step 2: dead → Step 3: dead → Step 4: dead\nG: Initially: alive → Step 1: alive → Step 2: dead → Step 3: alive → Step 4: dead\nH: Initially: alive → Step 1: dead → Step 2: dead → Step 3: dead → Step 4: dead",
        "answer": "F",
        "analysis": "Target Cell State Change Analysis:\n\nInitial State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2\n0: 1 0 0\n1: 0 0 1\n2: [0] 1 0\n\nTarget Cell Initial Status:\nCell (2,0) - currently dead\n\nNeighbors:\n- above left (wrapped): (1,2) is alive\n- above right: (1,1) is dead\n- above: (1,0) is dead\n- below (wrapped): (0,0) is alive\n- below left (wrapped): (0,2) is dead\n- below right (wrapped): (0,1) is dead\n- left (wrapped): (2,2) is dead\n- right: (2,1) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCells that will change in the next step:\n• Cell (0,1): dead → alive (reproduction, has 3 neighbors)\n• Cell (0,2): dead → alive (reproduction, has 3 neighbors)\n• Cell (1,0): dead → alive (reproduction, has 3 neighbors)\n• Cell (1,1): dead → alive (reproduction, has 3 neighbors)\n• Cell (2,0): dead → alive (reproduction, has 3 neighbors)\n• Cell (2,2): dead → alive (reproduction, has 3 neighbors)\n\n==================== Step 1 ====================\n\nNew Grid State:\n   0 1 2\n0: 1 1 1\n1: 1 1 1\n2: [1] 1 1\n\nTarget Cell Status:\nCell (2,0) - currently alive\n\nNeighbors:\n- above left (wrapped): (1,2) is alive\n- above right: (1,1) is alive\n- above: (1,0) is alive\n- below (wrapped): (0,0) is alive\n- below left (wrapped): (0,2) is alive\n- below right (wrapped): (0,1) is alive\n- left (wrapped): (2,2) is alive\n- right: (2,1) is alive\n\nTotal live neighbors: 8\n\nPrediction:\n→ Will die due to overpopulation (more than 3 live neighbors)\n\nCells that will change in the next step:\n• Cell (0,0): alive → dead (due to overpopulation, has 8 neighbors)\n• Cell (0,1): alive → dead (due to overpopulation, has 8 neighbors)\n• Cell (0,2): alive → dead (due to overpopulation, has 8 neighbors)\n• Cell (1,0): alive → dead (due to overpopulation, has 8 neighbors)\n• Cell (1,1): alive → dead (due to overpopulation, has 8 neighbors)\n• Cell (1,2): alive → dead (due to overpopulation, has 8 neighbors)\n• Cell (2,0): alive → dead (due to overpopulation, has 8 neighbors)\n• Cell (2,1): alive → dead (due to overpopulation, has 8 neighbors)\n• Cell (2,2): alive → dead (due to overpopulation, has 8 neighbors)\n\n==================== Step 2 ====================\n\nNew Grid State:\n   0 1 2\n0: 0 0 0\n1: 0 0 0\n2: [0] 0 0\n\nTarget Cell Status:\nCell (2,0) - currently dead\n\nNeighbors:\n- above left (wrapped): (1,2) is dead\n- above right: (1,1) is dead\n- above: (1,0) is dead\n- below (wrapped): (0,0) is dead\n- below left (wrapped): (0,2) is dead\n- below right (wrapped): (0,1) is dead\n- left (wrapped): (2,2) is dead\n- right: (2,1) is dead\n\nTotal live neighbors: 0\n\nPrediction:\n→ Will remain dead (does not have exactly 3 live neighbors)\n\nNo cells will change in the next step.\n\n==================== Step 3 ====================\n\nNew Grid State:\n   0 1 2\n0: 0 0 0\n1: 0 0 0\n2: [0] 0 0\n\nTarget Cell Status:\nCell (2,0) - currently dead\n\nNeighbors:\n- above left (wrapped): (1,2) is dead\n- above right: (1,1) is dead\n- above: (1,0) is dead\n- below (wrapped): (0,0) is dead\n- below left (wrapped): (0,2) is dead\n- below right (wrapped): (0,1) is dead\n- left (wrapped): (2,2) is dead\n- right: (2,1) is dead\n\nTotal live neighbors: 0\n\nPrediction:\n→ Will remain dead (does not have exactly 3 live neighbors)\n\nNo cells will change in the next step.\n\n==================== Step 4 ====================\n\nNew Grid State:\n   0 1 2\n0: 0 0 0\n1: 0 0 0\n2: [0] 0 0\n\nTarget Cell Status:\nCell (2,0) - currently dead\n\nNeighbors:\n- above left (wrapped): (1,2) is dead\n- above right: (1,1) is dead\n- above: (1,0) is dead\n- below (wrapped): (0,0) is dead\n- below left (wrapped): (0,2) is dead\n- below right (wrapped): (0,1) is dead\n- left (wrapped): (2,2) is dead\n- right: (2,1) is dead\n\nTotal live neighbors: 0\n\nPrediction:\n→ Will remain dead (does not have exactly 3 live neighbors)\n\nNo cells will change in the next step.\n\n==================================================\n\nTarget Cell State Change Summary:\nInitially: dead → Step 1: alive → Step 2: dead → Step 3: dead → Step 4: dead\n\nThe option is F.",
        "options": [
            "A: Initially: alive → Step 1: alive → Step 2: dead → Step 3: dead → Step 4: dead",
            "B: Initially: alive → Step 1: dead → Step 2: alive → Step 3: alive → Step 4: alive",
            "C: Initially: dead → Step 1: alive → Step 2: dead → Step 3: dead → Step 4: alive",
            "D: Initially: alive → Step 1: alive → Step 2: dead → Step 3: alive → Step 4: alive",
            "E: Initially: dead → Step 1: alive → Step 2: dead → Step 3: alive → Step 4: dead",
            "F: Initially: dead → Step 1: alive → Step 2: dead → Step 3: dead → Step 4: dead",
            "G: Initially: alive → Step 1: alive → Step 2: dead → Step 3: alive → Step 4: dead",
            "H: Initially: alive → Step 1: dead → Step 2: dead → Step 3: dead → Step 4: dead"
        ],
        "image": "images/board_002.png",
        "state": "states/board_002.json"
    },
    {
        "data_id": "lifegame-mcq-00003-state",
        "qa_type": "Target Perception",
        "qa_level": "Easy",
        "question_id": 1,
        "question_description": "Questions about counting the current number of live cells in the grid",
        "plot_level": "Hard",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nHow many live cells are currently in the grid?\n\nOptions:\nA: 6\nB: 8\nC: 5\nD: 14\nE: 16\nF: 22\nG: 7\nH: 13",
        "answer": "A",
        "analysis": "Current State Analysis:\n\nGrid State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2 3 4\n0: 0 0 0 0 0\n1: 0 1 0 0 0\n2: 1 1 0 0 1\n3: 1 0 0 0 0\n4: 1 0 0 0 0\n\nCounting live cells row by row:\n\nRow 0:\n- Live cells in this row: 0\n\nRow 1:\n- Live cells in this row: 1\n- Positions: (1,1)\n\nRow 2:\n- Live cells in this row: 3\n- Positions: (2,0), (2,1), (2,4)\n\nRow 3:\n- Live cells in this row: 1\n- Positions: (3,0)\n\nRow 4:\n- Live cells in this row: 1\n- Positions: (4,0)\n\nFinal Count:\n- Total live cells: 6\n\nThe option is A.",
        "options": [
            "A: 6",
            "B: 8",
            "C: 5",
            "D: 14",
            "E: 16",
            "F: 22",
            "G: 7",
            "H: 13"
        ],
        "image": "images/board_003.png",
        "state": "states/board_003.json"
    },
    {
        "data_id": "lifegame-mcq-00004-action",
        "qa_type": "State Prediction",
        "qa_level": "Medium",
        "question_id": 2,
        "question_description": "Questions about predicting the number of live cells after 1 iteration",
        "plot_level": "Hard",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nAfter 1 iterations, how many live cells will remain in the grid?\n\nOptions:\nA: 12\nB: 2\nC: 22\nD: 7\nE: 13\nF: 3\nG: 19\nH: 23",
        "answer": "A",
        "analysis": "Evolution Analysis:\n\nInitial State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2 3 4\n0: 1 1 0 0 0\n1: 1 0 0 0 0\n2: 0 1 1 1 0\n3: 1 0 1 0 0\n4: 0 1 0 0 1\n\nInitial Cell Analysis:\n\nIdentifying cells that will change in the next step:\n\nCell (0,0):\nCell (0,0) - currently alive\n\nNeighbors:\n- above (wrapped): (4,0) is dead\n- above left (wrapped): (4,4) is alive\n- above right (wrapped): (4,1) is alive\n- below left (wrapped): (1,4) is dead\n- below right: (1,1) is dead\n- below: (1,0) is alive\n- left (wrapped): (0,4) is dead\n- right: (0,1) is alive\n\nTotal live neighbors: 4\n\nPrediction:\n→ Will die due to overpopulation (more than 3 live neighbors)\n\nCell (0,4):\nCell (0,4) - currently dead\n\nNeighbors:\n- above (wrapped): (4,4) is alive\n- above left (wrapped): (4,3) is dead\n- above right (wrapped): (4,0) is dead\n- below left: (1,3) is dead\n- below right (wrapped): (1,0) is alive\n- below: (1,4) is dead\n- left: (0,3) is dead\n- right (wrapped): (0,0) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (1,4):\nCell (1,4) - currently dead\n\nNeighbors:\n- above left: (0,3) is dead\n- above right (wrapped): (0,0) is alive\n- above: (0,4) is dead\n- below left: (2,3) is alive\n- below right (wrapped): (2,0) is dead\n- below: (2,4) is dead\n- left: (1,3) is dead\n- right (wrapped): (1,0) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (2,0):\nCell (2,0) - currently dead\n\nNeighbors:\n- above left (wrapped): (1,4) is dead\n- above right: (1,1) is dead\n- above: (1,0) is alive\n- below left (wrapped): (3,4) is dead\n- below right: (3,1) is dead\n- below: (3,0) is alive\n- left (wrapped): (2,4) is dead\n- right: (2,1) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (2,1):\nCell (2,1) - currently alive\n\nNeighbors:\n- above left: (1,0) is alive\n- above right: (1,2) is dead\n- above: (1,1) is dead\n- below left: (3,0) is alive\n- below right: (3,2) is alive\n- below: (3,1) is dead\n- left: (2,0) is dead\n- right: (2,2) is alive\n\nTotal live neighbors: 4\n\nPrediction:\n→ Will die due to overpopulation (more than 3 live neighbors)\n\nCell (2,4):\nCell (2,4) - currently dead\n\nNeighbors:\n- above left: (1,3) is dead\n- above right (wrapped): (1,0) is alive\n- above: (1,4) is dead\n- below left: (3,3) is dead\n- below right (wrapped): (3,0) is alive\n- below: (3,4) is dead\n- left: (2,3) is alive\n- right (wrapped): (2,0) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (3,2):\nCell (3,2) - currently alive\n\nNeighbors:\n- above left: (2,1) is alive\n- above right: (2,3) is alive\n- above: (2,2) is alive\n- below left: (4,1) is alive\n- below right: (4,3) is dead\n- below: (4,2) is dead\n- left: (3,1) is dead\n- right: (3,3) is dead\n\nTotal live neighbors: 4\n\nPrediction:\n→ Will die due to overpopulation (more than 3 live neighbors)\n\nCell (3,4):\nCell (3,4) - currently dead\n\nNeighbors:\n- above left: (2,3) is alive\n- above right (wrapped): (2,0) is dead\n- above: (2,4) is dead\n- below left: (4,3) is dead\n- below right (wrapped): (4,0) is dead\n- below: (4,4) is alive\n- left: (3,3) is dead\n- right (wrapped): (3,0) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (4,1):\nCell (4,1) - currently alive\n\nNeighbors:\n- above left: (3,0) is alive\n- above right: (3,2) is alive\n- above: (3,1) is dead\n- below (wrapped): (0,1) is alive\n- below left (wrapped): (0,0) is alive\n- below right (wrapped): (0,2) is dead\n- left: (4,0) is dead\n- right: (4,2) is dead\n\nTotal live neighbors: 4\n\nPrediction:\n→ Will die due to overpopulation (more than 3 live neighbors)\n\nCell (4,2):\nCell (4,2) - currently dead\n\nNeighbors:\n- above left: (3,1) is dead\n- above right: (3,3) is dead\n- above: (3,2) is alive\n- below (wrapped): (0,2) is dead\n- below left (wrapped): (0,1) is alive\n- below right (wrapped): (0,3) is dead\n- left: (4,1) is alive\n- right: (4,3) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nOther cells will maintain their current state according to the rules.\n\nSummary of Predicted Changes:\n- 6 cells will become alive: (0,4), (1,4), (2,0), (2,4), (3,4), (4,2)\n- 4 cells will die: (0,0), (2,1), (3,2), (4,1)\n\n==================== After 1 iteration ====================\n\nGrid State('1' stands for living cell and '0' stands for dead cell,[ ] represents cells that have undergone changes):\n   0 1 2 3 4\n0: [0] 1 0 0 [1]\n1: 1 0 0 0 [1]\n2: [1] [0] 1 1 [1]\n3: 1 0 [0] 0 [1]\n4: 0 [0] [1] 0 1\n\nCounting final live cells row by row:\n\nRow 0:\n- Live cells: 2\n- Positions: (0,1), (0,4)\n\nRow 1:\n- Live cells: 2\n- Positions: (1,0), (1,4)\n\nRow 2:\n- Live cells: 4\n- Positions: (2,0), (2,2), (2,3), (2,4)\n\nRow 3:\n- Live cells: 2\n- Positions: (3,0), (3,4)\n\nRow 4:\n- Live cells: 2\n- Positions: (4,2), (4,4)\n\nFinal Count:\n- Initial live cells: 10\n- Final live cells: 12\n- Population change: +2\n\nThe option is A.",
        "options": [
            "A: 12",
            "B: 2",
            "C: 22",
            "D: 7",
            "E: 13",
            "F: 3",
            "G: 19",
            "H: 23"
        ],
        "image": "images/board_004.png",
        "state": "states/board_004.json"
    },
    {
        "data_id": "lifegame-mcq-00005-cell-changes",
        "qa_type": "State Prediction",
        "qa_level": "Medium",
        "question_id": 3,
        "question_description": "Questions about counting state changes of specific cells over iterations",
        "plot_level": "Medium",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nConsider the cell at position (0, 1). How will its state change over the next 3 iterations?\n\nOptions:\nA: Initially: dead → Step 1: alive → Step 2: alive → Step 3: alive\nB: Initially: dead → Step 1: alive → Step 2: dead → Step 3: dead\nC: Initially: dead → Step 1: alive → Step 2: alive → Step 3: dead\nD: Initially: alive → Step 1: dead → Step 2: alive → Step 3: dead\nE: Initially: dead → Step 1: dead → Step 2: alive → Step 3: dead\nF: Initially: alive → Step 1: dead → Step 2: dead → Step 3: dead\nG: Initially: alive → Step 1: alive → Step 2: dead → Step 3: alive\nH: Initially: dead → Step 1: dead → Step 2: alive → Step 3: alive",
        "answer": "E",
        "analysis": "Target Cell State Change Analysis:\n\nInitial State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2 3\n0: 0 [0] 0 0\n1: 0 1 0 1\n2: 0 0 1 0\n3: 0 1 0 0\n\nTarget Cell Initial Status:\nCell (0,1) - currently dead\n\nNeighbors:\n- above (wrapped): (3,1) is alive\n- above left (wrapped): (3,0) is dead\n- above right (wrapped): (3,2) is dead\n- below left: (1,0) is dead\n- below right: (1,2) is dead\n- below: (1,1) is alive\n- left: (0,0) is dead\n- right: (0,2) is dead\n\nTotal live neighbors: 2\n\nPrediction:\n→ Will remain dead (does not have exactly 3 live neighbors)\n\nCells that will change in the next step:\n• Cell (0,0): dead → alive (reproduction, has 3 neighbors)\n• Cell (0,2): dead → alive (reproduction, has 3 neighbors)\n• Cell (1,1): alive → dead (due to underpopulation, has 1 neighbors)\n• Cell (1,2): dead → alive (reproduction, has 3 neighbors)\n• Cell (1,3): alive → dead (due to underpopulation, has 1 neighbors)\n• Cell (2,0): dead → alive (reproduction, has 3 neighbors)\n• Cell (2,1): dead → alive (reproduction, has 3 neighbors)\n• Cell (3,1): alive → dead (due to underpopulation, has 1 neighbors)\n\n==================== Step 1 ====================\n\nNew Grid State:\n   0 1 2 3\n0: 1 [0] 1 0\n1: 0 0 1 0\n2: 1 1 1 0\n3: 0 0 0 0\n\nTarget Cell Status:\nCell (0,1) - currently dead\n\nNeighbors:\n- above (wrapped): (3,1) is dead\n- above left (wrapped): (3,0) is dead\n- above right (wrapped): (3,2) is dead\n- below left: (1,0) is dead\n- below right: (1,2) is alive\n- below: (1,1) is dead\n- left: (0,0) is alive\n- right: (0,2) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCells that will change in the next step:\n• Cell (0,0): alive → dead (due to underpopulation, has 0 neighbors)\n• Cell (0,1): dead → alive (reproduction, has 3 neighbors)\n• Cell (0,2): alive → dead (due to underpopulation, has 1 neighbors)\n• Cell (0,3): dead → alive (reproduction, has 3 neighbors)\n• Cell (1,0): dead → alive (reproduction, has 3 neighbors)\n• Cell (2,0): alive → dead (due to underpopulation, has 1 neighbors)\n• Cell (2,3): dead → alive (reproduction, has 3 neighbors)\n• Cell (3,0): dead → alive (reproduction, has 3 neighbors)\n• Cell (3,2): dead → alive (reproduction, has 3 neighbors)\n\n==================== Step 2 ====================\n\nNew Grid State:\n   0 1 2 3\n0: 0 [1] 0 1\n1: 1 0 1 0\n2: 0 1 1 1\n3: 1 0 1 0\n\nTarget Cell Status:\nCell (0,1) - currently alive\n\nNeighbors:\n- above (wrapped): (3,1) is dead\n- above left (wrapped): (3,0) is alive\n- above right (wrapped): (3,2) is alive\n- below left: (1,0) is alive\n- below right: (1,2) is alive\n- below: (1,1) is dead\n- left: (0,0) is dead\n- right: (0,2) is dead\n\nTotal live neighbors: 4\n\nPrediction:\n→ Will die due to overpopulation (more than 3 live neighbors)\n\nCells that will change in the next step:\n• Cell (0,1): alive → dead (due to overpopulation, has 4 neighbors)\n• Cell (0,3): alive → dead (due to overpopulation, has 4 neighbors)\n• Cell (1,0): alive → dead (due to overpopulation, has 4 neighbors)\n• Cell (1,2): alive → dead (due to overpopulation, has 5 neighbors)\n• Cell (2,1): alive → dead (due to overpopulation, has 5 neighbors)\n• Cell (2,2): alive → dead (due to overpopulation, has 4 neighbors)\n• Cell (2,3): alive → dead (due to overpopulation, has 5 neighbors)\n• Cell (3,0): alive → dead (due to overpopulation, has 4 neighbors)\n• Cell (3,2): alive → dead (due to overpopulation, has 5 neighbors)\n\n==================== Step 3 ====================\n\nNew Grid State:\n   0 1 2 3\n0: 0 [0] 0 0\n1: 0 0 0 0\n2: 0 0 0 0\n3: 0 0 0 0\n\nTarget Cell Status:\nCell (0,1) - currently dead\n\nNeighbors:\n- above (wrapped): (3,1) is dead\n- above left (wrapped): (3,0) is dead\n- above right (wrapped): (3,2) is dead\n- below left: (1,0) is dead\n- below right: (1,2) is dead\n- below: (1,1) is dead\n- left: (0,0) is dead\n- right: (0,2) is dead\n\nTotal live neighbors: 0\n\nPrediction:\n→ Will remain dead (does not have exactly 3 live neighbors)\n\nNo cells will change in the next step.\n\n==================================================\n\nTarget Cell State Change Summary:\nInitially: dead → Step 1: dead → Step 2: alive → Step 3: dead\n\nThe option is E.",
        "options": [
            "A: Initially: dead → Step 1: alive → Step 2: alive → Step 3: alive",
            "B: Initially: dead → Step 1: alive → Step 2: dead → Step 3: dead",
            "C: Initially: dead → Step 1: alive → Step 2: alive → Step 3: dead",
            "D: Initially: alive → Step 1: dead → Step 2: alive → Step 3: dead",
            "E: Initially: dead → Step 1: dead → Step 2: alive → Step 3: dead",
            "F: Initially: alive → Step 1: dead → Step 2: dead → Step 3: dead",
            "G: Initially: alive → Step 1: alive → Step 2: dead → Step 3: alive",
            "H: Initially: dead → Step 1: dead → Step 2: alive → Step 3: alive"
        ],
        "image": "images/board_005.png",
        "state": "states/board_005.json"
    },
    {
        "data_id": "lifegame-mcq-00006-stability",
        "qa_type": "State Prediction",
        "qa_level": "Hard",
        "question_id": 4,
        "question_description": "Questions about predicting steps needed to reach stability",
        "plot_level": "Hard",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nConsider the 3x3 region starting at cell (4,0).\n\nWhen analyzing this region's stability:\n• We treat it as an independent Game of Life system\n• The region is stable when either:\n  - All cells maintain their current states, or\n  - The cells form a repeating pattern\nHow many iterations will it take for this region to reach a stable state?\n\nOptions:\nA: 2\nB: 8\nC: 1\nD: 7\nE: 3\nF: 4\nG: 6\nH: 5",
        "answer": "C",
        "analysis": "Local Region Stability Analysis:\n\nStep 0 - Initial State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2 3 4\n0: [0] [1] [0] 1 0\n1: [0] [1] [1] 1 0\n2: 0 0 0 1 0\n3: 1 0 0 1 0\n4: [1] [0] [1] 0 0\n\nTarget 3x3 Region (starting at (4,0),'1' stands for living cell and '0' stands for dead cell):\n1 0 1\n0 1 0\n0 1 1\n\n==================================================\n\nStep 1:\n\nGlobal Evolution Changes:\n\nCell at global position (0,0):\n- Changed from dead to alive\n- Reason: reproduction (exactly 3 live neighbors)\n\nCell at global position (0,1):\n- Changed from alive to dead\n- Reason: overpopulation (more than 3 live neighbors)\n\nCell at global position (0,4):\n- Changed from dead to alive\n- Reason: reproduction (exactly 3 live neighbors)\n\nCell at global position (1,2):\n- Changed from alive to dead\n- Reason: overpopulation (more than 3 live neighbors)\n\nCell at global position (1,4):\n- Changed from dead to alive\n- Reason: reproduction (exactly 3 live neighbors)\n\nCell at global position (2,1):\n- Changed from dead to alive\n- Reason: reproduction (exactly 3 live neighbors)\n\nCell at global position (3,0):\n- Changed from alive to dead\n- Reason: underpopulation (fewer than 2 live neighbors)\n\nCell at global position (3,1):\n- Changed from dead to alive\n- Reason: reproduction (exactly 3 live neighbors)\n\nCell at global position (3,2):\n- Changed from dead to alive\n- Reason: reproduction (exactly 3 live neighbors)\n\nCell at global position (4,3):\n- Changed from dead to alive\n- Reason: reproduction (exactly 3 live neighbors)\n\nAfter global evolution:\n   0 1 2 3 4\n0: [1] [0] [0] 1 1\n1: [0] [1] [0] 1 1\n2: 0 1 0 1 0\n3: 0 1 1 1 0\n4: [1] [0] [1] 1 0\n\nLocal Stability Analysis (treating the region as an independent Game of Life):\n\nThe region has reached stability!\nWhen treated as an independent 3x3 Game of Life:\n\nCell at local position (0,0):\n- Currently alive\n- Has 3 live neighbors:\n  • Live neighbor below at (1,0)\n  • Live neighbor left (wrapped via left/right boundary) at (0,2)\n  • Live neighbor upper right (wrapped via top/bottom boundary) at (2,1)\n- Will survive (has 2 or 3 live neighbors)\n\nCell at local position (0,1):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor above (wrapped via top/bottom boundary) at (2,1)\n  • Live neighbor left at (0,0)\n  • Live neighbor lower left at (1,0)\n  • Live neighbor right at (0,2)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (0,2):\n- Currently alive\n- Has 3 live neighbors:\n  • Live neighbor lower right (wrapped via left/right boundary) at (1,0)\n  • Live neighbor right (wrapped via left/right boundary) at (0,0)\n  • Live neighbor upper left (wrapped via top/bottom boundary) at (2,1)\n- Will survive (has 2 or 3 live neighbors)\n\nCell at local position (1,0):\n- Currently alive\n- Has 3 live neighbors:\n  • Live neighbor above at (0,0)\n  • Live neighbor lower right at (2,1)\n  • Live neighbor upper left (wrapped via left/right boundary) at (0,2)\n- Will survive (has 2 or 3 live neighbors)\n\nCell at local position (1,1):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor below at (2,1)\n  • Live neighbor left at (1,0)\n  • Live neighbor upper left at (0,0)\n  • Live neighbor upper right at (0,2)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (1,2):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor above at (0,2)\n  • Live neighbor lower left at (2,1)\n  • Live neighbor right (wrapped via left/right boundary) at (1,0)\n  • Live neighbor upper right (wrapped via left/right boundary) at (0,0)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (2,0):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor above at (1,0)\n  • Live neighbor below (wrapped via top/bottom boundary) at (0,0)\n  • Live neighbor lower left (wrapped via top/bottom and left/right boundary) at (0,2)\n  • Live neighbor right at (2,1)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (2,1):\n- Currently alive\n- Has 3 live neighbors:\n  • Live neighbor lower left (wrapped via top/bottom boundary) at (0,0)\n  • Live neighbor lower right (wrapped via top/bottom boundary) at (0,2)\n  • Live neighbor upper left at (1,0)\n- Will survive (has 2 or 3 live neighbors)\n\nCell at local position (2,2):\n- Currently dead\n- Has 4 live neighbors:\n  • Live neighbor below (wrapped via top/bottom boundary) at (0,2)\n  • Live neighbor left at (2,1)\n  • Live neighbor lower right (wrapped via top/bottom and left/right boundary) at (0,0)\n  • Live neighbor upper right (wrapped via left/right boundary) at (1,0)\n- Will remain dead (does not have exactly 3 live neighbors)\n\nThe option is C.",
        "options": [
            "A: 2",
            "B: 8",
            "C: 1",
            "D: 7",
            "E: 3",
            "F: 4",
            "G: 6",
            "H: 5"
        ],
        "image": "images/board_006.png",
        "state": "states/board_006.json"
    },
    {
        "data_id": "lifegame-mcq-00007-stability",
        "qa_type": "State Prediction",
        "qa_level": "Hard",
        "question_id": 4,
        "question_description": "Questions about predicting steps needed to reach stability",
        "plot_level": "Easy",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nConsider the 3x3 region starting at cell (2,0).\n\nWhen analyzing this region's stability:\n• We treat it as an independent Game of Life system\n• The region is stable when either:\n  - All cells maintain their current states, or\n  - The cells form a repeating pattern\nHow many iterations will it take for this region to reach a stable state?\n\nOptions:\nA: 8\nB: 6\nC: 5\nD: 3\nE: 2\nF: 4\nG: 1\nH: 7",
        "answer": "G",
        "analysis": "Local Region Stability Analysis:\n\nStep 0 - Initial State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2\n0: [0] [1] [0]\n1: [0] [0] [1]\n2: [0] [0] [0]\n\nTarget 3x3 Region (starting at (2,0),'1' stands for living cell and '0' stands for dead cell):\n0 0 0\n0 1 0\n0 0 1\n\n==================================================\n\nStep 1:\n\nGlobal Evolution Changes:\n\nCell at global position (0,1):\n- Changed from alive to dead\n- Reason: underpopulation (fewer than 2 live neighbors)\n\nCell at global position (1,2):\n- Changed from alive to dead\n- Reason: underpopulation (fewer than 2 live neighbors)\n\nAfter global evolution:\n   0 1 2\n0: [0] [0] [0]\n1: [0] [0] [0]\n2: [0] [0] [0]\n\nLocal Stability Analysis (treating the region as an independent Game of Life):\n\nThe region has reached stability!\nWhen treated as an independent 3x3 Game of Life:\n\nCell at local position (0,0):\n- Currently dead\n- Has 0 live neighbors:\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (0,1):\n- Currently dead\n- Has 0 live neighbors:\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (0,2):\n- Currently dead\n- Has 0 live neighbors:\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (1,0):\n- Currently dead\n- Has 0 live neighbors:\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (1,1):\n- Currently dead\n- Has 0 live neighbors:\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (1,2):\n- Currently dead\n- Has 0 live neighbors:\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (2,0):\n- Currently dead\n- Has 0 live neighbors:\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (2,1):\n- Currently dead\n- Has 0 live neighbors:\n- Will remain dead (does not have exactly 3 live neighbors)\n\nCell at local position (2,2):\n- Currently dead\n- Has 0 live neighbors:\n- Will remain dead (does not have exactly 3 live neighbors)\n\nThe option is G.",
        "options": [
            "A: 8",
            "B: 6",
            "C: 5",
            "D: 3",
            "E: 2",
            "F: 4",
            "G: 1",
            "H: 7"
        ],
        "image": "images/board_007.png",
        "state": "states/board_007.json"
    },
    {
        "data_id": "lifegame-mcq-00008-state",
        "qa_type": "Target Perception",
        "qa_level": "Easy",
        "question_id": 1,
        "question_description": "Questions about counting the current number of live cells in the grid",
        "plot_level": "Medium",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nHow many live cells are currently in the grid?\n\nOptions:\nA: 8\nB: 3\nC: 0\nD: 11\nE: 4\nF: 15\nG: 7\nH: 6",
        "answer": "E",
        "analysis": "Current State Analysis:\n\nGrid State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2 3\n0: 1 0 0 0\n1: 0 0 0 1\n2: 0 1 0 0\n3: 1 0 0 0\n\nCounting live cells row by row:\n\nRow 0:\n- Live cells in this row: 1\n- Positions: (0,0)\n\nRow 1:\n- Live cells in this row: 1\n- Positions: (1,3)\n\nRow 2:\n- Live cells in this row: 1\n- Positions: (2,1)\n\nRow 3:\n- Live cells in this row: 1\n- Positions: (3,0)\n\nFinal Count:\n- Total live cells: 4\n\nThe option is E.",
        "options": [
            "A: 8",
            "B: 3",
            "C: 0",
            "D: 11",
            "E: 4",
            "F: 15",
            "G: 7",
            "H: 6"
        ],
        "image": "images/board_008.png",
        "state": "states/board_008.json"
    },
    {
        "data_id": "lifegame-mcq-00009-state",
        "qa_type": "Target Perception",
        "qa_level": "Easy",
        "question_id": 1,
        "question_description": "Questions about counting the current number of live cells in the grid",
        "plot_level": "Easy",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nHow many live cells are currently in the grid?\n\nOptions:\nA: 5\nB: 3\nC: 9\nD: 8\nE: 0\nF: 7\nG: 2\nH: 6",
        "answer": "G",
        "analysis": "Current State Analysis:\n\nGrid State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2\n0: 0 0 1\n1: 0 0 0\n2: 0 0 1\n\nCounting live cells row by row:\n\nRow 0:\n- Live cells in this row: 1\n- Positions: (0,2)\n\nRow 1:\n- Live cells in this row: 0\n\nRow 2:\n- Live cells in this row: 1\n- Positions: (2,2)\n\nFinal Count:\n- Total live cells: 2\n\nThe option is G.",
        "options": [
            "A: 5",
            "B: 3",
            "C: 9",
            "D: 8",
            "E: 0",
            "F: 7",
            "G: 2",
            "H: 6"
        ],
        "image": "images/board_009.png",
        "state": "states/board_009.json"
    },
    {
        "data_id": "lifegame-mcq-00010-action",
        "qa_type": "State Prediction",
        "qa_level": "Medium",
        "question_id": 2,
        "question_description": "Questions about predicting the number of live cells after 1 iteration",
        "plot_level": "Easy",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nAfter 1 iterations, how many live cells will remain in the grid?\n\nOptions:\nA: 8\nB: 3\nC: 2\nD: 7\nE: 0\nF: 9\nG: 6\nH: 5",
        "answer": "F",
        "analysis": "Evolution Analysis:\n\nInitial State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2\n0: 0 0 0\n1: 0 1 0\n2: 1 1 0\n\nInitial Cell Analysis:\n\nIdentifying cells that will change in the next step:\n\nCell (0,0):\nCell (0,0) - currently dead\n\nNeighbors:\n- above (wrapped): (2,0) is alive\n- above left (wrapped): (2,2) is dead\n- above right (wrapped): (2,1) is alive\n- below left (wrapped): (1,2) is dead\n- below right: (1,1) is alive\n- below: (1,0) is dead\n- left (wrapped): (0,2) is dead\n- right: (0,1) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (0,1):\nCell (0,1) - currently dead\n\nNeighbors:\n- above (wrapped): (2,1) is alive\n- above left (wrapped): (2,0) is alive\n- above right (wrapped): (2,2) is dead\n- below left: (1,0) is dead\n- below right: (1,2) is dead\n- below: (1,1) is alive\n- left: (0,0) is dead\n- right: (0,2) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (0,2):\nCell (0,2) - currently dead\n\nNeighbors:\n- above (wrapped): (2,2) is dead\n- above left (wrapped): (2,1) is alive\n- above right (wrapped): (2,0) is alive\n- below left: (1,1) is alive\n- below right (wrapped): (1,0) is dead\n- below: (1,2) is dead\n- left: (0,1) is dead\n- right (wrapped): (0,0) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (1,0):\nCell (1,0) - currently dead\n\nNeighbors:\n- above left (wrapped): (0,2) is dead\n- above right: (0,1) is dead\n- above: (0,0) is dead\n- below left (wrapped): (2,2) is dead\n- below right: (2,1) is alive\n- below: (2,0) is alive\n- left (wrapped): (1,2) is dead\n- right: (1,1) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (1,2):\nCell (1,2) - currently dead\n\nNeighbors:\n- above left: (0,1) is dead\n- above right (wrapped): (0,0) is dead\n- above: (0,2) is dead\n- below left: (2,1) is alive\n- below right (wrapped): (2,0) is alive\n- below: (2,2) is dead\n- left: (1,1) is alive\n- right (wrapped): (1,0) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCell (2,2):\nCell (2,2) - currently dead\n\nNeighbors:\n- above left: (1,1) is alive\n- above right (wrapped): (1,0) is dead\n- above: (1,2) is dead\n- below (wrapped): (0,2) is dead\n- below left (wrapped): (0,1) is dead\n- below right (wrapped): (0,0) is dead\n- left: (2,1) is alive\n- right (wrapped): (2,0) is alive\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nOther cells will maintain their current state according to the rules.\n\nSummary of Predicted Changes:\n- 6 cells will become alive: (0,0), (0,1), (0,2), (1,0), (1,2), (2,2)\n\n==================== After 1 iteration ====================\n\nGrid State('1' stands for living cell and '0' stands for dead cell,[ ] represents cells that have undergone changes):\n   0 1 2\n0: [1] [1] [1]\n1: [1] 1 [1]\n2: 1 1 [1]\n\nCounting final live cells row by row:\n\nRow 0:\n- Live cells: 3\n- Positions: (0,0), (0,1), (0,2)\n\nRow 1:\n- Live cells: 3\n- Positions: (1,0), (1,1), (1,2)\n\nRow 2:\n- Live cells: 3\n- Positions: (2,0), (2,1), (2,2)\n\nFinal Count:\n- Initial live cells: 3\n- Final live cells: 9\n- Population change: +6\n\nThe option is F.",
        "options": [
            "A: 8",
            "B: 3",
            "C: 2",
            "D: 7",
            "E: 0",
            "F: 9",
            "G: 6",
            "H: 5"
        ],
        "image": "images/board_010.png",
        "state": "states/board_010.json"
    },
    {
        "data_id": "lifegame-mcq-00011-cell-changes",
        "qa_type": "State Prediction",
        "qa_level": "Medium",
        "question_id": 3,
        "question_description": "Questions about counting state changes of specific cells over iterations",
        "plot_level": "Hard",
        "question": "Conway's Game of Life is a cellular automaton where each cell in the grid can be either alive (black) or dead (white). \n\nEach cell interacts with its eight neighbors, which are the cells that are horizontally, vertically, or diagonally adjacent. For a cell at position (r,c), its neighbors are:\n- (r-1,c-1)  (r-1,c)  (r-1,c+1)   [above row]\n- (r,c-1)     (r,c)    (r,c+1)     [same row]\n- (r+1,c-1)  (r+1,c)  (r+1,c+1)   [below row]\n\nRegion boundaries wrap around to the opposite side:\n- A cell at the top edge connects to cells at the bottom edge\n- A cell at the left edge connects to cells at the right edge\n- Corner cells connect to the diagonally opposite corner\nFor example, in a 3x3 region:\n- Cell (0,0)'s top neighbor is (2,0)\n- Cell (0,0)'s left neighbor is (0,2)\n- Cell (0,0)'s top-left neighbor is (2,2)\n\nThe game evolves in discrete steps according to these rules:\n1. Any live cell with fewer than two live neighbors dies (underpopulation)\n2. Any live cell with two or three live neighbors lives on to the next generation\n3. Any live cell with more than three live neighbors dies (overpopulation)\n4. Any dead cell with exactly three live neighbors becomes alive (reproduction)\n\nIn the image, black squares represent live cells, white squares represent dead cells, and the grid lines help visualize the cell boundaries. \n\nIn this grid, we use (row, col) coordinates where:\n- row increases from top to bottom (0 at top)\n- col increases from left to right (0 at left)\nFor example, the top-left cell is at (0, 0), and the cell below it is at (1, 0).\n\nConsider the cell at position (4, 2). How will its state change over the next 2 iterations?\n\nOptions:\nA: Initially: alive → Step 1: alive → Step 2: dead\nB: Initially: dead → Step 1: alive → Step 2: dead\nC: Initially: dead → Step 1: dead → Step 2: dead\nD: Initially: alive → Step 1: dead → Step 2: dead\nE: Initially: alive → Step 1: dead → Step 2: alive\nF: Initially: dead → Step 1: dead → Step 2: alive\nG: Initially: alive → Step 1: alive → Step 2: alive\nH: Initially: dead → Step 1: alive → Step 2: alive",
        "answer": "E",
        "analysis": "Target Cell State Change Analysis:\n\nInitial State('1' stands for living cell and '0' stands for dead cell):\n   0 1 2 3 4\n0: 0 0 0 1 0\n1: 0 1 0 1 0\n2: 0 1 1 0 0\n3: 0 0 0 0 0\n4: 0 0 [1] 0 0\n\nTarget Cell Initial Status:\nCell (4,2) - currently alive\n\nNeighbors:\n- above left: (3,1) is dead\n- above right: (3,3) is dead\n- above: (3,2) is dead\n- below (wrapped): (0,2) is dead\n- below left (wrapped): (0,1) is dead\n- below right (wrapped): (0,3) is alive\n- left: (4,1) is dead\n- right: (4,3) is dead\n\nTotal live neighbors: 1\n\nPrediction:\n→ Will die due to underpopulation (fewer than 2 live neighbors)\n\nCells that will change in the next step:\n• Cell (3,1): dead → alive (reproduction, has 3 neighbors)\n• Cell (3,2): dead → alive (reproduction, has 3 neighbors)\n• Cell (4,2): alive → dead (due to underpopulation, has 1 neighbors)\n\n==================== Step 1 ====================\n\nNew Grid State:\n   0 1 2 3 4\n0: 0 0 0 1 0\n1: 0 1 0 1 0\n2: 0 1 1 0 0\n3: 0 1 1 0 0\n4: 0 0 [0] 0 0\n\nTarget Cell Status:\nCell (4,2) - currently dead\n\nNeighbors:\n- above left: (3,1) is alive\n- above right: (3,3) is dead\n- above: (3,2) is alive\n- below (wrapped): (0,2) is dead\n- below left (wrapped): (0,1) is dead\n- below right (wrapped): (0,3) is alive\n- left: (4,1) is dead\n- right: (4,3) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will become alive due to reproduction (exactly 3 live neighbors)\n\nCells that will change in the next step:\n• Cell (0,2): dead → alive (reproduction, has 3 neighbors)\n• Cell (0,3): alive → dead (due to underpopulation, has 1 neighbors)\n• Cell (2,0): dead → alive (reproduction, has 3 neighbors)\n• Cell (2,1): alive → dead (due to overpopulation, has 4 neighbors)\n• Cell (2,2): alive → dead (due to overpopulation, has 5 neighbors)\n• Cell (2,3): dead → alive (reproduction, has 3 neighbors)\n• Cell (4,2): dead → alive (reproduction, has 3 neighbors)\n\n==================== Step 2 ====================\n\nNew Grid State:\n   0 1 2 3 4\n0: 0 0 1 0 0\n1: 0 1 0 1 0\n2: 1 0 0 1 0\n3: 0 1 1 0 0\n4: 0 0 [1] 0 0\n\nTarget Cell Status:\nCell (4,2) - currently alive\n\nNeighbors:\n- above left: (3,1) is alive\n- above right: (3,3) is dead\n- above: (3,2) is alive\n- below (wrapped): (0,2) is alive\n- below left (wrapped): (0,1) is dead\n- below right (wrapped): (0,3) is dead\n- left: (4,1) is dead\n- right: (4,3) is dead\n\nTotal live neighbors: 3\n\nPrediction:\n→ Will survive (has 2 or 3 live neighbors)\n\nCells that will change in the next step:\n• Cell (0,1): dead → alive (reproduction, has 3 neighbors)\n• Cell (0,3): dead → alive (reproduction, has 3 neighbors)\n• Cell (1,4): dead → alive (reproduction, has 3 neighbors)\n• Cell (2,4): dead → alive (reproduction, has 3 neighbors)\n• Cell (3,3): dead → alive (reproduction, has 3 neighbors)\n• Cell (4,3): dead → alive (reproduction, has 3 neighbors)\n\n==================================================\n\nTarget Cell State Change Summary:\nInitially: alive → Step 1: dead → Step 2: alive\n\nThe option is E.",
        "options": [
            "A: Initially: alive → Step 1: alive → Step 2: dead",
            "B: Initially: dead → Step 1: alive → Step 2: dead",
            "C: Initially: dead → Step 1: dead → Step 2: dead",
            "D: Initially: alive → Step 1: dead → Step 2: dead",
            "E: Initially: alive → Step 1: dead → Step 2: alive",
            "F: Initially: dead → Step 1: dead → Step 2: alive",
            "G: Initially: alive → Step 1: alive → Step 2: alive",
            "H: Initially: dead → Step 1: alive → Step 2: alive"
        ],
        "image": "images/board_011.png",
        "state": "states/board_011.json"
    }
]